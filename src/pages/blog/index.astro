---
import BaseLayout from '../../layouts/BaseLayout.astro';

const title = 'Blog';
const description = 'Discover the latest insights, tutorials, and best practices in AI automation engineering from our community of experts.';

// Load all blog posts from date-based folders (only index.md files)
const modules = import.meta.glob('./*/index.md', { eager: true });
const allPosts = Object.entries(modules).map(([path, module]) => {
  const mod = module as any; // Type assertion for Astro module
  return {
    frontmatter: mod.frontmatter || {},
    url: path.replace('./', '/blog/').replace('/index.md', '/')
  };
});

// Process and sort blog posts
const blogPosts = allPosts.filter(post => {
  const frontmatter = post.frontmatter || {};
  const url = post.url;
  
  // Extract date from folder name or use frontmatter date
  const folderMatch = url?.match(/\/(\d{4}-\d{2}-\d{2})-/);
  const dateFromFolder = folderMatch ? folderMatch[1] : null;
  
  // Use pubDate from frontmatter or publishDate, fallback to folder date
  const publishDate = frontmatter.pubDate || frontmatter.publishDate || dateFromFolder;
  
  // Only include posts with valid dates
  return !!publishDate;
}).map(post => {
  const frontmatter = post.frontmatter || {};
  const url = post.url;
  
  // Extract date from folder name or use frontmatter date
  const folderMatch = url?.match(/\/(\d{4}-\d{2}-\d{2})-/);
  const dateFromFolder = folderMatch ? folderMatch[1] : null;
  
  // Use pubDate from frontmatter or publishDate, fallback to folder date
  const publishDate = frontmatter.pubDate || frontmatter.publishDate || dateFromFolder;
  
  return {
    id: url?.split('/').slice(-2, -1)[0] || 'unknown', // Get folder name as ID
    title: frontmatter.title || 'Untitled',
    excerpt: frontmatter.description || 'No description available',
    publishDate: publishDate!,
    readTime: frontmatter.readTime || '5 min read',
    category: frontmatter.category || 'General',
    author: frontmatter.author || 'Anonymous',
    image: frontmatter.image || 'https://images.pexels.com/photos/3861969/pexels-photo-3861969.jpeg?auto=compress&cs=tinysrgb&w=600&h=400&dpr=2',
    tags: frontmatter.tags || [],
    url: url
  };
}).sort((a, b) => {
  // Sort by publish date (newest first)
  return new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime();
});

// Extract unique categories from posts
const categories = ['All', ...new Set(blogPosts.map(post => post.category))];
---

<BaseLayout {title} {description}>
  <div class="animate-fade-in">
    <!-- Hero Section -->
    <section class="bg-gradient-primary text-white py-16">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <h1 class="text-4xl md:text-5xl font-bold mb-4">AI Automation Blog</h1>
          <p class="text-xl text-blue-100 max-w-2xl mx-auto">
            Discover the latest insights, tutorials, and best practices from our community of AI automation experts
          </p>
        </div>
      </div>
    </section>

    <!-- Blog Content -->
    <section class="py-16 bg-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Category Filter -->
        <div class="mb-12">
          <div class="flex flex-wrap gap-2 justify-center">
            {categories.map(category => (
              <button 
                class="px-4 py-2 rounded-full text-sm font-medium transition-colors
                       bg-gray-100 text-gray-700 hover:bg-primary-100 hover:text-primary-600
                       first:bg-primary-600 first:text-white first:hover:bg-primary-700"
                data-category={category}
              >
                {category}
              </button>
            ))}
          </div>
        </div>

        <!-- Blog Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {blogPosts.map(post => (
            <article class="card card-hover overflow-hidden" data-category={post.category}>
              <a href={post.url}>
                <img 
                  src={post.image} 
                  alt={post.title}
                  class="w-full h-48 object-cover"
                  width="600"
                  height="400"
                  loading="lazy"
                />
              </a>
              <div class="p-6">
                <div class="flex items-center mb-3">
                  <span class="bg-primary-100 text-primary-600 text-xs px-2 py-1 rounded-full">
                    {post.category}
                  </span>
                  <span class="text-gray-500 text-sm ml-auto">
                    {post.readTime}
                  </span>
                </div>
                
                <h2 class="font-bold text-xl mb-2">
                  <a href={post.url} class="hover:text-primary-600 transition-colors">
                    {post.title}
                  </a>
                </h2>
                
                <p class="text-gray-600 text-sm mb-4">
                  {post.excerpt}
                </p>
                
                <div class="flex items-center justify-between">
                  <div class="flex items-center">
                    <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                      <span class="text-sm font-medium text-gray-700">
                        {post.author.split(' ').map((name: string) => name[0]).join('')}
                      </span>
                    </div>
                    <div class="ml-3">
                      <p class="text-sm font-medium text-gray-900">{post.author}</p>
                      <p class="text-xs text-gray-500">
                        {new Date(post.publishDate).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </p>
                    </div>
                  </div>
                  <a 
                    href={post.url} 
                    class="text-primary-600 hover:text-primary-700 font-medium text-sm"
                  >
                    Read more â†’
                  </a>
                </div>
                
                <div class="mt-4 flex flex-wrap gap-2">
                  {post.tags.map((tag: string) => (
                    <span class="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </article>
          ))}
        </div>

        <!-- Load More Button -->
        <div class="text-center mt-12">
          <button class="btn-outline">
            Load More Articles
          </button>
        </div>
      </div>
    </section>

    <!-- Newsletter Signup -->
    <section class="py-16 bg-gray-50">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Stay Updated</h2>
        <p class="text-lg text-gray-600 mb-8">
          Subscribe to our newsletter and never miss the latest AI automation insights
        </p>
        <form class="max-w-md mx-auto flex gap-4">
          <input 
            type="email" 
            placeholder="Enter your email"
            class="form-input flex-1"
            required
          >
          <button type="submit" class="btn-primary">
            Subscribe
          </button>
        </form>
      </div>
    </section>
  </div>
</BaseLayout>

<script>
  // Category filter functionality
  document.addEventListener('DOMContentLoaded', function() {
    const categoryButtons = document.querySelectorAll('[data-category]') as NodeListOf<HTMLButtonElement>;
    const articles = document.querySelectorAll('article[data-category]') as NodeListOf<HTMLElement>;
    
    categoryButtons.forEach(button => {
      button.addEventListener('click', function() {
        const selectedCategory = this.dataset.category;
        
        // Remove active class from all buttons
        categoryButtons.forEach(btn => {
          btn.classList.remove('bg-primary-600', 'text-white');
          btn.classList.add('bg-gray-100', 'text-gray-700');
        });
        
        // Add active class to clicked button
        this.classList.remove('bg-gray-100', 'text-gray-700');
        this.classList.add('bg-primary-600', 'text-white');
        
        // Filter articles
        articles.forEach(article => {
          const articleCategory = article.dataset.category;
          if (selectedCategory === 'All' || articleCategory === selectedCategory) {
            article.style.display = 'block';
          } else {
            article.style.display = 'none';
          }
        });
      });
    });
  });
</script>