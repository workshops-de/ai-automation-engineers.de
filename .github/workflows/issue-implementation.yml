name: Issue Implementation Preparation

on:
  issues:
    types: [labeled]

jobs:
  prepare-implementation:
    if: github.event.label.name == 'ready-for-implementation'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare Feature Branch
        id: prepare-branch
        run: |
          # Generate branch name from issue
          ISSUE_NUMBER=${{ github.event.issue.number }}
          ISSUE_TITLE="${{ github.event.issue.title }}"
          # Convert to lowercase and replace spaces with hyphens, format: feature/{number}-{title}
          BRANCH_NAME=$(echo "feature/${ISSUE_NUMBER}-${ISSUE_TITLE}" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | sed 's/[^a-z0-9\-\/]//g')

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if branch already exists
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch already exists, checking it out: $BRANCH_NAME"
            git fetch origin "$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            git checkout -b "$BRANCH_NAME"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "Branch created: $BRANCH_NAME"
          fi

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Implement Feature with Claude
        uses: anthropics/claude-code-action@main
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_args: "--allowedTools Bash(gh *),Bash(git *),Read,Write,Edit,Glob,Grep"
          prompt: |
            Implementiere die Anforderungen aus dem folgenden Issue VOLLSTÄNDIG im aktuellen Branch.

            REPO: ${{ github.repository }}
            ISSUE_NUMBER: ${{ github.event.issue.number }}
            BRANCH: ${{ steps.prepare-branch.outputs.branch_name }}

            **WICHTIG: Du befindest dich bereits im Feature Branch. Implementiere das Feature vollständig und erstelle die notwendigen Commits.**

            **Projektkontext:**
            - Framework: Astro 5.11.0 (static output)
            - UI: React 18.3.1 für interaktive Komponenten
            - Styling: Tailwind CSS 3.4.17
            - Backend: Firebase 11.10.0 (Authentication, Firestore)
            - Deployment: GitHub Pages via GitHub Actions

            **Projektstruktur:**
            ```
            src/
            ├── components/          # React/Astro Komponenten
            ├── layouts/             # Layout Templates
            ├── pages/               # Routen und Seiten
            │   └── blog/            # Blog Artikel (YYYY-MM-DD-slug/index.md)
            ├── lib/
            │   └── firebase.ts      # Firebase Konfiguration
            └── styles/              # CSS Dateien
            ```

            **Commit-Standards (ZWINGEND einhalten):**
            - Conventional Commits Format: `type(scope): description`
            - Typen: feat, fix, docs, style, refactor, test, chore
            - Commit-Message am Ende mit:
              ```
              🤖 Generated with [Claude Code](https://claude.com/claude-code)

              Co-Authored-By: Claude <noreply@anthropic.com>
              ```

            **Implementierungs-Workflow:**
            1. Lies das Issue und verstehe die Anforderungen vollständig
            2. Analysiere die Codebase und identifiziere betroffene Dateien
            3. Implementiere die Änderungen (erstelle/ändere Dateien)
            4. Erstelle einen oder mehrere Commits mit Conventional Commits Format
            5. Push die Änderungen zum Remote Branch
            6. Kommentiere im Issue mit einer Zusammenfassung der Implementierung

            **Nach erfolgreicher Implementierung, kommentiere im Issue:**

            ## ✅ Implementierung abgeschlossen

            **Branch:** `${{ steps.prepare-branch.outputs.branch_name }}`

            **Durchgeführte Änderungen:**
            - [Liste der geänderten/erstellten Dateien]

            **Commits:**
            - [Liste der Commit-Messages]

            **Testing:**
            - [Hinweise zum Testen der Änderungen]

            **Nächste Schritte:**
            - [ ] Lokales Testen durchführen
            - [ ] Pull Request erstellen
            - [ ] Code Review anfordern

            ---
            *Implementiert von Claude Code*

      - name: Push Changes
        run: |
          git push origin ${{ steps.prepare-branch.outputs.branch_name }}

      - name: Create Pull Request
        run: |
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head ${{ steps.prepare-branch.outputs.branch_name }} --json number --jq '.[0].number' --repo ${{ github.repository }})

          if [ -z "$EXISTING_PR" ]; then
            # Create new PR linked to issue
            gh pr create \
              --repo ${{ github.repository }} \
              --base main \
              --head ${{ steps.prepare-branch.outputs.branch_name }} \
              --title "feat: ${{ github.event.issue.title }}" \
              --body "$(cat <<'EOF'
          ## 🤖 Automatisch generierter Pull Request

          Dieser PR implementiert die Anforderungen aus Issue #${{ github.event.issue.number }}.

          ### 📋 Verknüpftes Issue
          Closes #${{ github.event.issue.number }}

          ### 🔍 Änderungen
          Die Implementierung wurde automatisch von Claude Code durchgeführt.

          ### ✅ Checkliste
          - [ ] Code wurde lokal getestet
          - [ ] Conventional Commits eingehalten
          - [ ] Keine Breaking Changes (oder dokumentiert)
          - [ ] Dokumentation aktualisiert (falls nötig)

          ---
          🤖 Erstellt von [Claude Code](https://claude.com/claude-code)
          EOF
          )"
            echo "✅ Pull Request erstellt"
          else
            echo "ℹ️ Pull Request existiert bereits: #$EXISTING_PR"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
