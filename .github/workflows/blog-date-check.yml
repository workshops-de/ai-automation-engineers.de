name: Blog Article Date Check

on:
  push:
    branches:
      - main
      - 'feature/**'
    paths:
      - 'src/pages/blog/**'

jobs:
  check-blog-dates:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Get changed blog files
        id: changed-files
        run: |
          # Get list of changed files in blog directory
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep '^src/pages/blog/.*index\.md$' || echo "")

          if [ -z "$CHANGED_FILES" ]; then
            echo "No blog articles changed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changed blog files:"
          echo "$CHANGED_FILES"

          # Save to file for next step
          echo "$CHANGED_FILES" > changed_blog_files.txt

          # Get current date
          CURRENT_DATE=$(date +%Y-%m-%d)
          echo "current_date=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "Current date: $CURRENT_DATE"

      - name: Configure Git
        if: steps.changed-files.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check and fix article dates with Claude
        if: steps.changed-files.outputs.has_changes == 'true'
        uses: anthropics/claude-code-action@main
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          claude_args: "--allowedTools Bash(git *),Bash(mv *),Bash(date *),Read,Write,Edit,Glob"
          prompt: |
            √úberpr√ºfe die folgenden Blog-Artikel auf korrekte Datumsangaben und korrigiere sie bei Bedarf.

            **Heutiges Datum:** ${{ steps.changed-files.outputs.current_date }}

            **Ge√§nderte Dateien:**
            Die Datei `changed_blog_files.txt` enth√§lt die Liste der ge√§nderten Blog-Artikel.
            Lies diese Datei und √ºberpr√ºfe jeden Artikel.

            **Aufgabe:**
            1. F√ºr jeden ge√§nderten Blog-Artikel in `src/pages/blog/`:
               - Extrahiere das Datum aus dem Ordnernamen (Format: YYYY-MM-DD-slug)
               - Vergleiche es mit dem heutigen Datum
               - Wenn das Datum in der Vergangenheit liegt (√§lter als heute):
                 a) Benenne den Ordner um auf das heutige Datum (Format: YYYY-MM-DD-slug, wobei nur das Datum ge√§ndert wird, der Slug bleibt gleich)
                 b) Aktualisiere das `pubDate` im Frontmatter der index.md auf das heutige Datum
                 c) Erstelle einen Git-Commit mit der Message: "fix(blog): update article date to current date"

            **Blog-Artikel-Struktur:**
            ```
            src/pages/blog/YYYY-MM-DD-article-slug/
            ‚îî‚îÄ‚îÄ index.md
            ```

            **Frontmatter-Beispiel:**
            ```yaml
            ---
            layout: '../../../layouts/BlogLayout.astro'
            title: 'Article Title'
            pubDate: 'YYYY-MM-DD'
            ...
            ---
            ```

            **Wichtig:**
            - Nur Artikel mit Datum in der Vergangenheit korrigieren
            - Artikel mit heutigem oder zuk√ºnftigem Datum NICHT √§ndern
            - Conventional Commits Format einhalten
            - Commit-Message mit Claude Attribution:
              ```
              fix(blog): update article date to current date

              ü§ñ Generated with [Claude Code](https://claude.com/claude-code)

              Co-Authored-By: Claude <noreply@anthropic.com>
              ```

            **Falls keine √Ñnderungen n√∂tig sind:**
            - Gib eine kurze Zusammenfassung aus: "Alle Artikel haben korrekte Datumsangaben"
            - Erstelle KEINEN Commit

            **Falls √Ñnderungen durchgef√ºhrt wurden:**
            - Gib eine Zusammenfassung aus mit:
              - Welche Artikel ge√§ndert wurden
              - Altes vs. neues Datum
              - Neuer Pfad

      - name: Push changes if any
        if: steps.changed-files.outputs.has_changes == 'true'
        run: |
          # Check if there are any changes (staged or unstaged)
          if git diff --quiet && git diff --cached --quiet; then
            echo "‚ÑπÔ∏è No changes to push - all articles have correct dates"
          else
            git push origin ${{ github.ref_name }}
            echo "‚úÖ Blog article dates updated and pushed"
          fi
